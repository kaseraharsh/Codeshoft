import tkinter as tk
from tkinter import ttk, messagebox
import random
import string

# Window dimensions and password rules
APP_WIDTH, APP_HEIGHT = 560, 350
MIN_LENGTH, MAX_LENGTH = 4, 80

# Character sets categorized
CHAR_SETS = {
    "uppercase": string.ascii_uppercase,
    "lowercase": string.ascii_lowercase,
    "digits": string.digits,
    "specials": string.punctuation
}

def generate_secure_password(length, complexity):
    """
    Assembles a randomized password string based on user-defined complexity level.
    """
    base_pool = []
    required_chars = []

    base_pool.extend(CHAR_SETS["uppercase"])
    base_pool.extend(CHAR_SETS["lowercase"])

    if complexity == "weak":
        required_chars.extend([
            random.choice(CHAR_SETS["uppercase"]),
            random.choice(CHAR_SETS["lowercase"])
        ])
    elif complexity == "moderate":
        base_pool.extend(CHAR_SETS["digits"])
        required_chars.extend([
            random.choice(CHAR_SETS["uppercase"]),
            random.choice(CHAR_SETS["lowercase"]),
            random.choice(CHAR_SETS["digits"])
        ])
    elif complexity == "strong":
        base_pool.extend(CHAR_SETS["digits"] + CHAR_SETS["specials"])
        required_chars.extend([
            random.choice(CHAR_SETS["uppercase"]),
            random.choice(CHAR_SETS["lowercase"]),
            random.choice(CHAR_SETS["digits"]),
            random.choice(CHAR_SETS["specials"])
        ])
    else:
        return "Error: Unknown complexity level selected."

    if len(required_chars) > length:
        return "Error: Password length too short for complexity."

    remaining = [random.choice(base_pool) for _ in range(length - len(required_chars))]
    password = required_chars + remaining
    random.shuffle(password)
    return ''.join(password)

def initialize_window():
    """
    Sets up the main GUI window.
    """
    win = tk.Tk()
    win.title("Locksmith - Password Creator")
    win.geometry(f"{APP_WIDTH}x{APP_HEIGHT}+{(win.winfo_screenwidth() - APP_WIDTH) // 2}+{(win.winfo_screenheight() - APP_HEIGHT) // 2}")
    win.resizable(False, False)
    ttk.Style().theme_use("clam")
    return win

def setup_interface(root):
    """
    Defines and arranges widgets on the GUI.
    """
    container = ttk.Frame(root, padding=25)
    container.grid(row=0, column=0)

    # App title
    ttk.Label(container, text="üîê Locksmith Password Generator", font=("Verdana", 18, "bold")).grid(row=0, column=0, columnspan=2, pady=(0, 25))

    # Length input
    ttk.Label(container, text="Password Length:", font=("Verdana", 11)).grid(row=1, column=0, sticky="w")
    length_input = ttk.Entry(container, width=6, font=("Verdana", 11))
    length_input.insert(0, "12")
    length_input.grid(row=1, column=1, sticky="w")

    # Strength level
    ttk.Label(container, text="Complexity:", font=("Verdana", 11)).grid(row=2, column=0, sticky="w", pady=(10, 0))
    level = tk.StringVar(value="strong")

    options_frame = ttk.Frame(container)
    options_frame.grid(row=3, column=0, columnspan=2, pady=(0, 10), sticky="w")

    for label, value in [("Weak (aA)", "weak"), ("Moderate (aA1)", "moderate"), ("Strong (aA1#)", "strong")]:
        ttk.Radiobutton(options_frame, text=label, variable=level, value=value).pack(side="left", padx=10)

    # Output field
    ttk.Label(container, text="Your Password:", font=("Verdana", 11)).grid(row=4, column=0, columnspan=2, sticky="w", pady=(10, 0))
    password_output = ttk.Entry(container, width=42, font=("Consolas", 12), state="readonly")
    password_output.grid(row=5, column=0, columnspan=2, pady=(0, 10))

    # Button actions
    def create_password():
        try:
            length = int(length_input.get())
            if not MIN_LENGTH <= length <= MAX_LENGTH:
                messagebox.showwarning("Invalid Length", f"Choose a number between {MIN_LENGTH} and {MAX_LENGTH}.")
                return

            result = generate_secure_password(length, level.get())
            if result.startswith("Error"):
                messagebox.showerror("Generation Failed", result)
                return

            password_output.config(state="normal")
            password_output.delete(0, tk.END)
            password_output.insert(0, result)
            password_output.config(state="readonly")

        except ValueError:
            messagebox.showerror("Invalid Input", "Please enter a numeric value for length.")

    def copy_to_clipboard():
        value = password_output.get()
        if not value:
            messagebox.showinfo("No Password", "Generate a password first.")
            return
        root.clipboard_clear()
        root.clipboard_append(value)
        messagebox.showinfo("Copied!", "Password copied to clipboard.")

    # Buttons
    action_frame = ttk.Frame(container)
    action_frame.grid(row=6, column=0, columnspan=2, pady=15)

    ttk.Button(action_frame, text="üîÅ Generate", command=create_password).pack(side="left", padx=5)
    ttk.Button(action_frame, text="üìã Copy", command=copy_to_clipboard).pack(side="left", padx=5)

    return length_input, level, password_output

# Launch the app
if __name__ == "__main__":
    app_root = initialize_window()
    setup_interface(app_root)
    app_root.mainloop()
